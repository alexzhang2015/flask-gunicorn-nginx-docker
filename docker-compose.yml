version: '3'
services:

  #Flask App Container
  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: boh/flask-python:3.11
    restart: unless-stopped
    tty: true
    environment:
      APP_ENV: "dev"
      APP_DEBUG: "True"
      APP_PORT: 5000
      MONGODB_DATABASE: flaskdb
      MONGODB_USERNAME: flaskuser
      MONGODB_PASSWORD: f19skp9ssw0rd
      MONGODB_HOSTNAME: mongodb
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  #MongoDB database container
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodbuser
      MONGO_INITDB_ROOT_PASSWORD: cl3v3rP9ssw0rd
      MONGO_INITDB_DATABASE: flaskdb
      MONGODB_DATABASE: flaskdb
      MONGODB_USER: flaskuser
      MONGODB_PASS: f19skp9ssw0rd
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  #Nginx Service
  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: boh/nginx:0.1
    container_name: nginx
    restart: unless-stopped
    tty: true
    environment:
      APP_ENV: "dev"
      APP_NAME: "nginx"
      APP_DEBUG: "true"
      SERVICE_NAME: "nginx"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/etc/nginx
    depends_on:
      - flask
    networks:
      - frontend

#Docker Networks
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

#Volumes
volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local